require 'yaml'
require 'spaceship'

APP_ID = "net.artsy.artsy"

lane :ship_beta do
  setup_for_app_store
  verify_pod_keys

  readme_yaml = File.read("../CHANGELOG.yml")
  readme_data = YAML.load(readme_yaml)

  latest_version = readme_data["upcoming"]["version"]

  upcoming = readme_data["upcoming"]
  commit =  `git log -n1 --format='%h'`.strip
  beta_readme =  "## #{upcoming["version"]} - #{commit} \n\n - #{upcoming["notes"].join "\n - "} \n\n"

  # Builds the app
  gym

  # Find out how many builds we've sent for this version
  # if it's zero, it will raise an exception
  build_version = 0
  begin
    Spaceship::Tunes.login(ENV["FASTLANE_USERNAME"], ENV["FASTLANE_PASSWORD"])
    app = Spaceship::Tunes::Application.find("net.artsy.artsy")
    train = app.build_trains[latest_version]
    build_version = train.builds.count + 1
  rescue
  end

  # Do a tag, we use a http git remote so we can have push access
  # as the default remote for circle is read-only
  tag = "#{latest_version}-#{build_version}"
  `git tag -d "#{tag}"`

  add_git_tag tag: tag
  `git remote add http https://github.com/artsy/eigen.git`
  `git push http #{tag}`

  # Ship to hockey first, testflight has to wait for processing
  hockey notes: beta_readme, api_token: ENV['HOCKEY_API_TOKEN'],
         public_identifier: ENV['HockeyAppLiveID'],
        repository_url: "https://github.com/artsy/eigen.git", commit_sha: commit

  # Do both beta / store, as right now any build can migrate across
  hockey notes: beta_readme, api_token: ENV['HOCKEY_API_TOKEN'],
         public_identifier: ENV['HockeyAppBetaID'],
         repository_url: "https://github.com/artsy/eigen.git", commit_sha: commit

  # Send to the app store
  pilot changelog: beta_readme

  # Let us know everything has finished
  slack message: "There is a new Eigen beta available. Grab it from Testflight on your iOS device.",
        channel: "collector-gmv-ios",
        payload: {
          'Version' => latest_version,
          'What\'s new' => beta_readme
        },
        default_payloads: []
end

lane :deploy_latest_to_external do
  readme_yaml = File.read("../CHANGELOG.yml")
  readme_data = YAML.load(readme_yaml)

  latest_version = readme_data["upcoming"]["version"]

  id = CredentialsManager::AppfileConfig.try_fetch_value(:apple_id)
  password = CredentialsManager::AccountManager.new(user: id).password
  Spaceship::Tunes.login(id, password)
  app = Spaceship::Tunes::Application.find APP_ID

  raise "You have no internal builds for #{latest_version}" if app.build_trains.keys.count == 0
  train = app.build_trains[latest_version]

  train.client.submit_testflight_build_for_review!(
    app_id: APP_ID,
    train: train.version_string,
    build_number: latest_version,
    platform: "ios"
  )
end

## We want to have a simpler version of Fastlane's match
## this does it in a pretty reasonable amount of code.

lane :setup_for_app_store do
  app_name = "eigen"
  signing_root = "signing"

  `git clone https://github.com/artsy/mobile_code_signing.git #{signing_root}`

  # prints out the codesigning identities
  system "security find-identity -v -p codesigning"

  # Install the iOS distribution certificate, -A
  system "security import #{signing_root}/ios_distribution.cer  -k ~/Library/Keychains/login.keychain -A"

  # Move our provisioning profile in
  profile_path = File.expand_path("~") + "/Library/MobileDevice/Provisioning Profiles/"
  destination = profile_path + "/" + app_name + ".mobileprovision"
  profile = Dir.glob(signing_root + "/profiles/" + app_name + "/*").first

  # Ensure folder exists
  unless File.directory?(profile_path)
    FileUtils.mkdir_p(profile_path)
  end

  # Migrate it in
  FileUtils.copy profile, destination
  puts "Installed Profile"

  # Install the key
  key = Dir.glob(signing_root + "/keys/" + app_name + "/*").first
  system "security import #{key} -k ~/Library/Keychains/login.keychain -P #{ENV['MATCH_PASSWORD']}  -A "

  # prints out the codesigning identities
  system "security find-identity -v -p codesigning"

  # Clean-up
  `rm -rf #{signing_root}`
end
