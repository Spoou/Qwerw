# frozen_string_literal: true

require 'yaml'
require 'spaceship'
require 'fileutils'
require 'json'

skip_docs

before_all do
  setup_circle_ci
end

lane :ship_beta do
  ship_beta_ios
  ship_beta_android
end

app_json_path = "../app.json"
app_json = JSON.parse(File.read(app_json_path))

app_plist = "../Artsy/App_Resources/Artsy-Info.plist"
sticker_plist = "../Artsy Stickers/Info.plist"


lane :ship_beta_ios do
  api_key = app_store_connect_api_key(
    key_id: ENV['ARTSY_APP_STORE_CONNECT_API_KEY_ID'],
    issuer_id: ENV['ARTSY_APP_STORE_CONNECT_API_KEY_ISSUER_ID'],
    key_content: ENV['ARTSY_APP_STORE_CONNECT_API_KEY_CONTENT'],
    in_house: false,
  )

  set_build_version_ios

  changelog_yaml = File.read('../CHANGELOG.yml')
  changelog_data = YAML.safe_load(changelog_yaml)

  latest_version = changelog_data['upcoming']['version']

  upcoming = changelog_data['upcoming']
  commit = `git log -n1 --format='%h'`.strip
  notes = upcoming['user_facing'] || []
  beta_readme = "## #{upcoming['version']} - #{commit} \n\n - #{notes.join "\n - "} \n\n"

  # Make sure the stickers app is up to date in it's plist
  `/usr/libexec/PlistBuddy -c "Set CFBundleVersion #{latest_version}" Artsy\ Stickers/Info.plist`

  # Builds the app
  sync_code_signing(app_identifier: ['net.artsy.artsy', 'net.artsy.artsy.Artsy-Stickers'], type: 'appstore')

  disable_automatic_code_signing(
    path: 'Artsy.xcodeproj',
    team_id: '23KMWZ572J',
    targets: ['Artsy'],
    profile_name: 'match AppStore net.artsy.artsy'
  )
  disable_automatic_code_signing(
    path: 'Artsy.xcodeproj',
    team_id: '23KMWZ572J',
    targets: ['Artsy Stickers'],
    profile_name: 'match AppStore net.artsy.artsy.Artsy-Stickers'
  )

  build_ios_app(configuration: 'Store', silent: true)

  root = File.expand_path('..', __dir__)
  bundle_version = `/usr/libexec/PlistBuddy -c "print CFBundleVersion" #{File.join(root, 'Artsy/App_Resources/Artsy-Info.plist')}`.strip
  tag_and_push(tag: "ios-#{latest_version}-#{bundle_version}")


  # important! this much match the release version specified
  # in Eigen in order for sourcemaps to work correctly
  sentry_release_version = "#{latest_version}+#{bundle_version}"

  # make individual dSYM archives available to the sentry-cli tool.
  dsym_archive = File.join(root, 'Artsy.app.dSYM.zip')
  dsyms_path = File.join(root, 'dSYMs')
  sh "unzip -d #{dsyms_path} #{dsym_archive}"

  upload_to_sentry = lambda do |project_slug, postfix|
    org_slug = 'artsynet'

    # releases on sentry are org-wide so we need to distinguish in staging
    sentry_release_version = sentry_release_version + postfix

    sentry_create_release auth_token: ENV['SentryUploadAuthKey'],
                          org_slug: org_slug,
                          project_slug: project_slug,
                          version: sentry_release_version,
                          finalize: false
    puts "Created a release for #{project_slug}"

    sentry_set_commits auth_token: ENV['SentryUploadAuthKey'],
                       org_slug: org_slug,
                       project_slug: project_slug,
                       version: sentry_release_version,
                       auto: true
    puts "Associated commits for Sentry release"

    Dir.glob(File.join(dsyms_path, '*.dSYM')).each do |dsym_path|
      # No need to specify `dist` as the build number is encoded in the dSYM's Info.plist
      sentry_upload_dsym auth_token: ENV['SentryUploadAuthKey'],
                         org_slug: org_slug,
                         project_slug: project_slug,
                         dsym_path: dsym_path
      puts "Uploaded dsym for #{project_slug}"
    end

    begin
      sentry_upload_file auth_token: ENV['SentryUploadAuthKey'],
                         org_slug: org_slug,
                         project_slug: project_slug,
                         version: sentry_release_version,
                         dist: bundle_version,
                         file: 'emission/Pod/Assets/Emission.js',
                         file_url: '~/Emission.js'
      puts "Uploaded Emission.js for #{project_slug}"

      sentry_upload_sourcemap auth_token: ENV['SentryUploadAuthKey'],
                              org_slug: org_slug,
                              project_slug: project_slug,
                              version: sentry_release_version,
                              dist: bundle_version,
                              sourcemap: 'emission/Pod/Assets/Emission.js.map',
                              rewrite: true
      puts "Uploaded Emission.js.map for #{project_slug}"
    rescue StandardError => e
      message = 'Uploading the JS bundle and/or sourcemap to Sentry failed. This sometimes happens when shipping many builds to Sentry.'
      puts message
      slack(
        message: message,
        success: false,
        payload: {
          'Circle Build' => ENV['CIRCLE_BUILD_URL'],
          'Exception' => e.message
        },
        default_payloads: [:last_git_commit_hash]
      )
      puts e.message
      puts e.backtrace.join("\n\t")
    end
  end

  upload_to_sentry.call('eigen', '')
  upload_to_sentry.call('eigen-beta', '-beta')

  # Send to the app store
  beta_app_review_info = {
    contact_email: ENV['BETA_CONTACT_EMAIL'],
    contact_first_name: ENV['BETA_CONTACT_FIRST_NAME'],
    contact_last_name: ENV['BETA_CONTACT_LAST_NAME'],
    contact_phone: ENV['BETA_CONTACT_PHONE'],
    demo_account_name: ENV['BETA_DEMO_ACCOUNT_NAME'],
    demo_account_password: ENV['BETA_DEMO_ACCOUNT_PWD']
  }
  pilot(api_key: api_key,
        beta_app_review_info: beta_app_review_info,
        changelog: beta_readme,
        itc_provider: 'ArtsyInc',
        distribute_external: true,
        groups: ['Artsy'])
end

lane :update_version_string do
  new_version = prompt(text: "What is the new human-readable release version?")
  app_json['version'] = new_version
  File.open(app_json_path, 'w') do |file|
    file.puts JSON.pretty_generate(app_json)
  end
end

date_str = DateTime.now.strftime("%Y.%m.%d.%H")
lane :set_build_version_ios do
  system("/usr/libexec/PlistBuddy -c \"Set CFBundleShortVersionString #{app_json['version']}\" #{app_plist}")
  system("/usr/libexec/PlistBuddy -c \"Set CFBundleShortVersionString #{app_json['version']}\" #{sticker_plist}")
  system("/usr/libexec/PlistBuddy -c \"Set CFBundleVersion #{date_str}\" #{app_plist}")
  system("/usr/libexec/PlistBuddy -c \"Set CFBundleVersion #{date_str}\" #{sticker_plist}")
end

build_gradle = "../android/app/build.gradle"
lane :set_build_version_android do
  current_version_code = google_play_track_version_codes(
    track: "alpha",
  ).first

  next_version_name = app_json['version']
  next_version_code = current_version_code + 1

  contents = File.read(build_gradle)

  contents = contents.gsub(/(versionName) .*/, "\\1 \"#{next_version_name}\"")
  contents = contents.gsub(/(versionCode) (.*)/, "\\1 #{next_version_code}")

  File.open(build_gradle, 'w') do |file|
    file.puts contents
  end

  [next_version_name, next_version_code]
end

git_commit_rev = `git log -n1 --format='%h'`.chomp
git_commit_sha = `git log -n1 --format='%H'`.chomp
git_commit_date_str = DateTime.parse(`git log -n1 --format='%ci'`.chomp).iso8601
git_remote_origin_url = `git config --get remote.origin.url`.chomp
lane :set_git_properties_ios do
  system("/usr/libexec/PlistBuddy -c \"Set GITCommitRev #{git_commit_rev}\" #{app_plist}")
  system("/usr/libexec/PlistBuddy -c \"Set GITCommitSha #{git_commit_sha}\" #{app_plist}")
  system("/usr/libexec/PlistBuddy -c \"Set GITCommitDate #{git_commit_date_str}\" #{app_plist}")
  system("/usr/libexec/PlistBuddy -c \"Set GITRemoteOriginURL #{git_remote_origin_url}\" #{app_plist}")
end

lane :set_git_properties_android do
  contents = File.read(build_gradle)

  contents = contents.gsub(/(GITCommitRev.* '").*("')/, "\\1#{git_commit_rev}\\2")
  contents = contents.gsub(/(GITCommitSha.* '").*("')/, "\\1#{git_commit_sha}\\2")
  contents = contents.gsub(/(GITCommitDate.* '").*("')/, "\\1#{git_commit_date_str}\\2")
  contents = contents.gsub(/(GITRemoteOriginURL.* '").*("')/, "\\1#{git_remote_origin_url}\\2")

  File.open(build_gradle, 'w') do |file|
    file.puts contents
  end
end

lane :ship_beta_android do
  sh("yarn jetifier")
  sh("yarn relay")

  vname, vcode = set_build_version_android
  tag_and_push(tag: "android-#{vname}-#{vcode}")

  gradle(
    task: "bundle",
    build_type: "Release",
    project_dir: "android/",
  )
  upload_to_play_store(
    track: "alpha",
  )
end

lane :promote_beta_ios do
  # There seems to be some delta between spaceship + deliver token format
  token = Spaceship::ConnectAPI::Token.create(
    key_id: ENV['ARTSY_APP_STORE_CONNECT_API_KEY_ID'],
    issuer_id: ENV['ARTSY_APP_STORE_CONNECT_API_KEY_ISSUER_ID'],
    key: ENV['ARTSY_APP_STORE_CONNECT_API_KEY_CONTENT'],
    in_house: false
  )

  api_key = app_store_connect_api_key(
    key_id: ENV['ARTSY_APP_STORE_CONNECT_API_KEY_ID'],
    issuer_id: ENV['ARTSY_APP_STORE_CONNECT_API_KEY_ISSUER_ID'],
    key_content: ENV['ARTSY_APP_STORE_CONNECT_API_KEY_CONTENT'],
    in_house: false,
  )

  Spaceship::ConnectAPI.token = token

  app = Spaceship::ConnectAPI::App.find('net.artsy.artsy')
  next_app_store_version = app.get_edit_app_store_version.version_string

  # app.builds are listed most recent first; we are assuming that we're shipping the most recent beta.
  latest_build = app.get_builds.first
  build_number = latest_build.version

  puts "Let's deliver beta #{next_app_store_version} (#{build_number}) with build number #{build_number}."
  deliver(
    api_key: api_key,
    build_number: build_number,
    force: true, # Skip HTMl report verification
    skip_screenshots: true,
    skip_binary_upload: true,
    submit_for_review: true,
    precheck_include_in_app_purchases: false,
    submission_information: {
      add_id_info_limits_tracking: true,
      add_id_info_serves_ads: false,
      add_id_info_tracks_action: true,
      add_id_info_tracks_install: true,
      add_id_info_uses_idfa: false,
      content_rights_has_rights: true,
      content_rights_contains_third_party_content: true,
      export_compliance_platform: 'ios',
      export_compliance_compliance_required: false,
      export_compliance_encryption_updated: false,
      export_compliance_app_type: nil,
      export_compliance_uses_encryption: false,
      export_compliance_is_exempt: false,
      export_compliance_contains_third_party_cryptography: false,
      export_compliance_contains_proprietary_cryptography: false,
      export_compliance_available_on_french_store: false
    }
  )

  puts 'Tagging submission and pushing to GitHub.'

  # Apple's API returns truncated version/build numbers (eg: 2020.03.19.18 becomes 2020.3.19.18)
  # So we need to add back leading zeroes
  build_version_components = beta.build_version.split('.')
  detruncated_components = build_version_components.map do |comp|
    if comp.length == 1
      '0' + comp
    else
      comp
    end
  end
  build_version = detruncated_components.join('.')

  tag_and_push(tag: "ios-#{beta.train_version}-#{build_version}-submission")
  puts 'All done.'
end

lane :notify_if_new_license_agreement do
  # TODO: This login method will no longer work for CI with 2fa being enforced
  # Check spaceship docs for future support with api key
  client = Spaceship::Tunes.login(ENV['FASTLANE_USERNAME'], ENV['FASTLANE_PASSWORD'])
  client.team_id = '479887'
  messages = Spaceship::Tunes.client.fetch_program_license_agreement_messages

  # ignore membership expiration warnings, auto-renew should take care of
  if messages.empty? || messages[0].include?('membership expiration')
    puts 'No new developer agreements'
  else
    message = <<~MSG
                :apple: :handshake: :pencil:
                There is a new developer program agreement that needs to be signed to continue shipping!
                Reach out to legal :scales: for approval before signing.
                https://appstoreconnect.apple.com/agreements/#/
              MSG
    puts message
    puts messages[0]
    slack(
      message: message,
      success: false,
      default_payloads: []
    )
  end
end

lane :notify_beta_failed do |options|
  exception = options[:exception]
  message = <<~MSG
              :x: :iphone:
              Looks like the latest beta failed to deploy!
              See circle job for more details.
            MSG
  slack(
    message: message,
    success: false,
    payload: {
      'Circle Build' => ENV['CIRCLE_BUILD_URL'],
      'Exception' => exception.message
    },
    default_payloads: []
  )
end

lane :promote_beta_android do
  current_version_code = google_play_track_version_codes(
    track: "alpha",
  ).first

  supply(
    track: 'alpha',
    track_promote_to: 'production',
    version_code: current_version_code
  )
end

lane :tag_and_push do |options|
  # Do a tag, we use a http git remote so we can have push access
  # as the default remote for circle is read-only
  tag = options[:tag]
  `git tag -d "#{tag}"`
  add_git_tag tag: tag
  `git remote add http https://github.com/artsy/eigen.git`
  `git push http #{tag} -f`
end

error do |lane, exception|
  if lane == :ship_beta or lane == :ship_beta_ios or lane == :ship_beta_android
    notify_beta_failed(exception: exception)
  end
end
