# frozen_string_literal: true

require 'yaml'
require 'spaceship'
require 'fileutils'
require 'json'
require 'dotenv'

Dotenv.load('../.env.shared')

skip_docs

# Constants and Path Configurations
$APP_JSON_PATH = '../app.json'
$APP_JSON = JSON.parse(File.read($APP_JSON_PATH))
APP_PLIST = '../ios/Artsy/App_Resources/Info.plist'
BUILD_GRADLE = '../android/app/build.gradle'

IOS_TARGETS = {
  'net.artsy.artsy' => { :name => 'Artsy', :plist_path => APP_PLIST },
  'net.artsy.artsy.Artsy-Stickers' => { :name => 'ArtsyStickers', :plist_path => '../ios/ArtsyStickers/Info.plist' },
  'net.artsy.artsy.ArtsyWidget' => { :name => 'ArtsyWidgetExtension', :plist_path => '../ios/ArtsyWidget/Info.plist' },
  'net.artsy.artsy.BrazePushServiceExtension' => { :name => 'BrazePushServiceExtension', :plist_path => '../ios/BrazePushServiceExtension/Info.plist' }
}

GIT_COMMIT_SHORT_HASH = `git log -n1 --format='%h'`.chomp
GIT_COMMIT_HASH = `git log -n1 --format='%H'`.chomp
GIT_COMMIT_DATE_STR = DateTime.parse(`git log -n1 --format='%ci'`.chomp).iso8601
GIT_REMOTE_ORIGIN_URL = `git config --get remote.origin.url`.chomp

import 'utility_fastlane.rb'
import 'sentry_fastlane.rb'

# Circle CI Setup

before_all do
  setup_circle_ci
end

# Common shipping lanes

lane :ship_beta do
  ship_beta_ios
  ship_beta_android
end

# iOS Lanes

desc "Ships iOS beta to TestFlight"
lane :ship_beta_ios do
  api_key = generate_app_store_connect_api_key

  bundle_version = set_build_version_ios

  latest_version = $APP_JSON['version']

  # TODO: Once changelog infra is nailed down we should get release notes from there
  beta_readme = "Thanks for using the Artsy beta!"

  # Builds the app
  ios_target_ids = IOS_TARGETS.keys
  sync_code_signing(app_identifier: ios_target_ids, type: 'appstore')

  IOS_TARGETS.each do |id, meta|
    disable_automatic_code_signing(
      path: 'ios/Artsy.xcodeproj',
      team_id: '23KMWZ572J',
      targets: [meta[:name]],
      profile_name: "match AppStore #{id}"
    )
  end

  tag_and_push(tag: "ios-#{latest_version}-#{bundle_version}")

  # important! this much match the release version specified
  # in Eigen in order for sourcemaps to work correctly
  sentry_release_name = "ios-#{latest_version}-#{bundle_version}"

  sh("yarn bundle:ios")
  build_ios_app(workspace: 'ios/Artsy.xcworkspace', configuration: 'Store', silent: true)

  upload_sentry_artifacts(sentry_release_name: sentry_release_name, dist_version: bundle_version, platform: "ios")

  # Send to the app store
  beta_app_review_info = {
    contact_email: ENV['BETA_CONTACT_EMAIL'],
    contact_first_name: ENV['BETA_CONTACT_FIRST_NAME'],
    contact_last_name: ENV['BETA_CONTACT_LAST_NAME'],
    contact_phone: ENV['BETA_CONTACT_PHONE'],
    demo_account_name: ENV['BETA_DEMO_ACCOUNT_NAME'],
    demo_account_password: ENV['BETA_DEMO_ACCOUNT_PWD']
  }

  pilot(api_key: api_key,
        beta_app_review_info: beta_app_review_info,
        changelog: beta_readme,
        itc_provider: 'ArtsyInc',
        distribute_external: true,
        groups: ['Artsy People', 'Applause People'])
end

lane :promote_beta_ios do
  api_key = generate_app_store_connect_api_key

  # There seems to be some delta between spaceship + deliver token format
  token = generate_spaceship_token
  Spaceship::ConnectAPI.token = token

  app = Spaceship::ConnectAPI::App.find('net.artsy.artsy')
  next_app_store_version = app.get_edit_app_store_version.version_string

  # app.builds are listed most recent first, limit to 20
  builds = app.get_builds.first(20).map { |build| build.version }

  UI.header "Last 20 iOS builds"

  build_number = UI.select("Which build would you like to release?: ", builds)

  if UI.confirm("Are you sure you would like to release '#{build_number}'?")
    UI.success "Continuing the release!"
  else
    UI.user_error!("Stopping the train!")
  end

  UI.success("Let's deliver beta #{next_app_store_version} (#{build_number}) with build number #{build_number}.")

  deliver(
    api_key: api_key,
    app_version: $APP_JSON['version'],
    build_number: build_number,
    submit_for_review: true,
    automatic_release: true,
    phased_release: true,
  )

  UI.message('Tagging submission and pushing to GitHub.')

  # Apple's API returns truncated version/build numbers (eg: 2020.03.19.18 becomes 2020.3.19.18)
  # So we need to add back leading zeroes
  build_version_components = build_number.split('.')
  detruncated_components = build_version_components.map do |comp|
    if comp.length == 1
      '0' + comp
    else
      comp
    end
  end
  build_version = detruncated_components.join('.')

  tag_and_push(tag: "ios-#{next_app_store_version}-#{build_version}-submission")
  UI.success('All done!')
end

lane :set_build_version_ios do
  bundle_version = DateTime.now.strftime("%Y.%m.%d.%H")
  IOS_TARGETS.each do |id, meta|
    set_info_plist_value(path: meta[:plist_path], key: 'CFBundleShortVersionString', value: $APP_JSON['version'])
    set_info_plist_value(path: meta[:plist_path], key: 'CFBundleVersion', value: bundle_version)
  end
  bundle_version
end

lane :set_git_properties_ios do
  set_info_plist_value(path: APP_PLIST, key: 'GITCommitShortHash', value: GIT_COMMIT_SHORT_HASH)
  set_info_plist_value(path: APP_PLIST, key: 'GITCommitHash', value: GIT_COMMIT_HASH)
  set_info_plist_value(path: APP_PLIST, key: 'GITCommitDate', value: GIT_COMMIT_DATE_STR)
  set_info_plist_value(path: APP_PLIST, key: 'GITRemoteOriginURL', value: GIT_REMOTE_ORIGIN_URL)
end

# This is a lane that is used to release the app on Apple Store Connect
# When it has been approved an it's pending developer release
lane :release_ios_app do |options|
  # There seems to be some delta between spaceship + deliver token format
  token = generate_spaceship_token

  Spaceship::ConnectAPI.token = token

  app = Spaceship::ConnectAPI::App.find('net.artsy.artsy')
  version = app.get_pending_release_app_store_version

  unless version.nil?
    Spaceship::ConnectAPI.post_app_store_version_release_request(app_store_version_id: version.id)
  end
end

lane :create_next_app_version do |options|
  api_key = generate_app_store_connect_api_key

  next_version = options[:next_version_code]

  puts "Let's create a new app version #{next_version}."
  deliver(
    api_key: api_key,
    app_version: next_version,
    skip_metadata: true,
    automatic_release: false,
    phased_release: false,
    submit_for_review: false,
  )
end

# Android Lanes

lane :ship_beta_android_play_store do
  sh("yarn jetifier")
  sh("yarn relay")

  # upload will overwrite past versions unless we explicitly tell it to retain some
  # cap at 20 for now, if we need more feel free to update!
  past_version_codes = google_play_track_version_codes(
    track: "alpha",
  ).first(20)

  vname, vcode = set_build_version_android
  tag_and_push(tag: "android-#{vname}-#{vcode}")

  sentry_release_name = "android-#{vname}-#{vcode}"

  # build again with flag set to false for release candidates
  flag_android_beta(is_android_beta: false)

  sh("mkdir -p android/app/src/main/assets && touch android/app/src/main/assets/index.android.bundle && yarn bundle:android")
  gradle(
    task: "bundle",
    build_type: "Release",
    project_dir: "android/",
    flags: "--no-daemon -x bundleReleaseJsAndAssets",
  )

  upload_sentry_artifacts(sentry_release_name: sentry_release_name, dist_version: "#{vcode}", platform: "android")

  supply(
    track: "alpha",
    skip_upload_apk: true,
    skip_upload_metadata: true,
    skip_upload_changelogs: true,
    skip_upload_images: true,
    skip_upload_screenshots: true
  )
end

lane :ship_beta_android_firebase do
  sh("yarn jetifier")
  sh("yarn relay")

  flag_android_beta(is_android_beta: true)

  vname, vcode = set_build_version_android

  sentry_release_name = "android-#{vname}-#{vcode}"

  sh("mkdir -p android/app/src/main/assets && touch android/app/src/main/assets/index.android.bundle && yarn bundle:android")
  gradle(
    task: "bundle",
    build_type: "Release",
    project_dir: "android/",
    flags: "--no-daemon -x bundleReleaseJsAndAssets",
  )

  firebase_app_distribution(
    app: ENV["FIREBASE_APP_ID"],
    groups: 'artsy-people',
    android_artifact_path: "./android/app/build/outputs/bundle/release/app-release.aab"
  )
end

lane :promote_beta_android do
  # android versions are listed most recent first, limit to 20
  version_codes = google_play_track_version_codes(
    track: "alpha",
  ).first(20)

  UI.header "Last 20 Android builds"

  selected_version_code = UI.select("Which build would you like to release?: ", version_codes)

  if UI.confirm("Are you sure you would like to release '#{selected_version_code}'?")
    UI.success "Continuing the release!"
  else
    UI.user_error!("Stopping the train!")
  end

  supply(
    track: 'alpha',
    version_code: selected_version_code,
    track_promote_to: 'production',
    rollout: '0.1',
    skip_upload_metadata: true,
    skip_upload_changelogs: true,
    skip_upload_images: true,
    skip_upload_screenshots: true,
  )

  vname, vcode = set_build_version_android(version_code: selected_version_code)
  tag_and_push(tag: "android-#{vname}-#{vcode}-submission")
end

lane :set_build_version_android do |options|
  version_code = options[:version_code]

  next_version_name = $APP_JSON['version']

  if version_code.nil?
    current_version_code = google_play_track_version_codes(
      track: "alpha",
    ).first
    version_code = current_version_code + 1
  end

  next_version_code = version_code

  contents = File.read(BUILD_GRADLE)

  contents = contents.gsub(/(versionName) .*/, "\\1 \"#{next_version_name}\"")
  contents = contents.gsub(/(versionCode) (.*)/, "\\1 #{next_version_code}")

  write_contents_to_file(BUILD_GRADLE, contents)

  [next_version_name, next_version_code]
end

lane :set_git_properties_android do
  contents = File.read(BUILD_GRADLE)

  contents = contents.gsub(/(GITCommitShortHash.* '").*("')/, "\\1#{GIT_COMMIT_SHORT_HASH}\\2")
  contents = contents.gsub(/(GITCommitHash.* '").*("')/, "\\1#{GIT_COMMIT_HASH}\\2")
  contents = contents.gsub(/(GITCommitDate.* '").*("')/, "\\1#{GIT_COMMIT_DATE_STR}\\2")
  contents = contents.gsub(/(GITRemoteOriginURL.* '").*("')/, "\\1#{GIT_REMOTE_ORIGIN_URL}\\2")

  write_contents_to_file(BUILD_GRADLE, contents)
end

lane :flag_android_beta do |options|
  is_android_beta = options[:is_android_beta]
  $APP_JSON['isAndroidBeta'] = is_android_beta
  write_contents_to_file($APP_JSON_PATH, JSON.pretty_generate($APP_JSON))
end

error do |lane, exception|
  if lane == :ship_beta or lane == :ship_beta_ios or lane == :ship_beta_android
    # Set this var if you want to silence beta failure alerts for a while
    # E.g. you are working on a ci change
    # Takes a date of format 2023-01-01, recommend only setting for 1 day in future
    silence_beta_failures_until = ENV['FASTLANE_SILENCE_BETA_FAILURES_UNTIL']
    if silence_beta_failures_until != nil
      silence_until_date = Date.parse(silence_beta_failures_until)
      if silence_until_date <= Date.today
        notify_beta_failed(exception: exception)
      else
        puts("Ignoring beta failure, make sure to unset FASTLANE_SILENCE_BETA_FAILURES_UNTIL to receive alerts")
      end
    else
      notify_beta_failed(exception: exception)
    end
  end
end
