# .circleci/config.yml

version: 2.1

orbs:
  node: circleci/node@1.1.6
  queue: eddiewebb/queue@1.5.0

jobs:
  workflow-queue:
    executor:
      name: node/default
      tag: "12.13.1"
    steps:
      - queue/until_front_of_line:
          time: "30" # how long a queue will wait until the job exits
          only-on-branch: master # restrict queueing to a specific branch (default *)
          consider-job: false # block whole workflow if any job still running

  build-and-test:
    environment:
      # Public - Yay
      UPLOAD_IOS_SNAPSHOT_BUCKET_NAME: eigen-ci

      # Private - Keeps us in business! Yay
      #   AWS_ACCESS_KEY_ID: from_admin
      #   AWS_SECRET_ACCESS_KEY: from_admin
      #   DANGER_GITHUB_API_TOKEN: from_admin
      #   MATCH_PASSWORD : from_admin
      #   HOCKEY_API_TOKEN : from_admin
      #   FASTLANE_USERNAME : from_admin
      #   FASTLANE_PASSWORD : from_admin
      #   ArtsyAPIClientSecret: from_admin
      #   ArtsyAPIClientKey: from_admin
      #   ArtsyFacebookAppID: from_admin
      #   ArtsyTwitterKey: from_admin
      #   ArtsyTwitterSecret: from_admin
      #   ArtsyTwitterStagingKey: from_admin
      #   ArtsyTwitterStagingSecret: from_admin
      #   SegmentProductionWriteKey: from_admin
      #   SegmentDevWriteKey: from_admin
      #   AdjustProductionAppToken: from_admin
      #   ArtsyEchoProductionToken:  from_admin
      BUNDLE_PATH: vendor/bundle # path to install gems and use for caching

    # Specify the Xcode version to use.
    macos:
      xcode: "11.3.0"

    # Define the steps required to build the project.
    steps:
      # Get the code from the VCS provider.
      - checkout

      - run:
          name: Install Node 12 (Required for Yarn)
          command: |
            set +e
            touch $BASH_ENV
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh | bash
            echo 'export NVM_DIR="$HOME/.nvm"' >> $BASH_ENV
            echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV
            echo 'nvm install v12.13.1' >> $BASH_ENV
            echo 'nvm alias default v12.13.1' >> $BASH_ENV

      - restore_cache:
          keys:
            - v1-gems-{{ checksum "Gemfile.lock" }}
            # Fall back to using the latest cache if no exact match is found.
            - v1-gems-

      # Install gems.
      - run:
          name: Bundle install
          command: bundle check || bundle install
          environment:
            BUNDLE_JOBS: 4
            BUNDLE_RETRY: 3

      - save_cache:
          key: v1-gems-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      - run:
          name: List sims
          command: xcversion simulators

      - run:
          name: List devices
          command: instruments -s device

      - restore_cache:
          keys:
            - v1-yarn-{{ checksum "yarn.lock" }}
            # Fall back to using the latest cache if no exact match is found.
            - v1-yarn-

      - run:
          name: Install node modules
          command: yarn install

      - save_cache:
          key: v1-yarn-{{ checksum "yarn.lock" }}
          paths:
            - node_modules

      - run:
          name: Compile query map
          command: yarn relay

      - run:
          name: Bundle emission
          command: yarn bundle-for-native-ci

      - restore_cache:
          keys:
            - v4-pods-{{ checksum "Podfile.lock" }}
            # Fall back to using the latest cache if no exact match is found.
            - v4-pods-

      - run:
          name: Install Pods
          command: bundle exec pod check || bundle exec pod install

      - save_cache:
          key: v4-pods-{{ checksum "Podfile.lock" }}
          paths:
            - Pods

      - run:
          name: Generate native code checksum
          command: node scripts/generate-native-code-checksum.js

      - restore_cache:
          keys:
            - v4-derived-data-{{ checksum "native-code-checksum.hash" }}

      - run:
          name: Pre-Build App
          command: make ci

      - save_cache:
          key: v4-derived-data-{{ checksum "native-code-checksum.hash" }}
          paths:
            - derived_data

      - restore_cache:
          keys:
            - v4-test-success-{{ checksum "native-code-checksum.hash" }}

      - run:
          name: Run tests if native code has changed
          command: "if [ ! -f xcode_test_raw.log ]; then make ci-test; fi"

      - save_cache:
          key: v4-test-success-{{ checksum "native-code-checksum.hash" }}
          paths:
            - xcode_test_raw.log

      - store_artifacts:
          path: xcode_build_raw.log
          prefix: build

      - store_artifacts:
          path: xcode_test_raw.log
          prefix: tests

      - store_test_results:
          path: test-results.xml

      - run:
          name: Danger
          command: bundle exec danger --danger_id=circle
            --dangerfile=Dangerfile.circle.rb --verbose

      - run:
          name: Deploy if beta
          command: make deploy_if_beta_branch

      - run:
          name: Promote if app_store_submission
          command: make promote_if_app_store_submission_branch

  update-metaphysics:
    executor:
      name: node/default
      tag: "12.13.1"

    shell: /bin/bash --login -eo pipefail

    steps:
      - checkout

      - add_ssh_keys:
          fingerprints:
            - "23:11:82:24:bb:cb:a8:1e:7a:eb:b1:f3:d6:e1:55:32"

      - restore_cache:
          keys:
            - v3-yarn-{{ checksum "yarn.lock" }}
            # Fall back to using the latest cache if no exact match is found.
            - v3-yarn-

      - run:
          name: Install Yarn Dependencies
          command: yarn install --ignore-engines

      - save_cache:
          key: v3-yarn-{{ checksum "yarn.lock" }}
          paths:
            - node_modules

      - run:
          name: Compile query map
          command: yarn relay

      - run:
          name: Deploy via auto-release
          command: yarn update-metaphysics

workflows:
  version: 2
  build-test:
    jobs:
      # make sure that previous builds have finished before deploying
      - workflow-queue
      - build-and-test:
          requires:
            - workflow-queue
      - update-metaphysics:
          requires:
            - workflow-queue
            - build-and-test
          filters:
            branches:
              only:
                - master
                - beta
                - app_store_submission
